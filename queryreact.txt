Difference between useQuery and useMutation
Purpose: useQuery is for reading data, while useMutation is for modifying data.
Typical Use Case: useQuery is used when you want to fetch and display data, while useMutation is used when you want to make changes to that data.
Return Values: useQuery returns { data, error, isLoading, isFetching }, while useMutation returns { mutate, data, error, isError, isLoading, isSuccess }.
Error Handling: Both hooks handle errors, but useMutation provides additional features for handling optimistic updates and

 rollbacks in case of errors during mutations.


import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import { QueryClientProvider, QueryClient } from '@tanstack/react-query';

const root = ReactDOM.createRoot(
  document.getElementById('root')
);

const queryClient = new QueryClient();

root.render(
  <QueryClientProvider client={queryClient}>
    <App />
  </QueryClientProvider>
);


import React from 'react';
This imports React, the library needed to create the UI (user interface). Even though we don't directly use React in every file anymore with modern React, it's still required for React components to work.

import ReactDOM from 'react-dom/client';
This imports the ReactDOM library which is responsible for rendering the React components into the DOM (the webpage). In modern React, createRoot is used for rendering.

import './index.css';
This imports a CSS file for styling the app.

import App from './App';
This imports the main app component (the App component) where the majority of the app logic is written.

import { QueryClientProvider, QueryClient } from '@tanstack/react-query';
This imports QueryClient and QueryClientProvider from react-query. QueryClient is used to manage the data fetching, and QueryClientProvider provides this client to all components in the app that need it.

const root = ReactDOM.createRoot(document.getElementById('root'))
This line creates the "root" element where our React app will live. It looks for an element with the ID 'root' in the HTML, which is where the React app will be mounted.

const queryClient = new QueryClient();
This creates a new instance of QueryClient. This is like creating a "controller" for managing data-fetching requests.

root.render(...);
Finally, this renders the actual app to the page. It wraps the App component inside QueryClientProvider so that the app can access react-query's functionality for managing API calls and caching.

2. App.js (Main component of the app)
javascript
Copy code
import React from 'react';
import './App.css';
import { useQuery, useMutation } from '@tanstack/react-query';

function App() {
  const userData = useQuery(
    ['users'],
    () => {
      return fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json());
    },
    {
      enabled: false,
    }
  );

  const mutatePost = useMutation(
    ['posts'],
    (newPost) => {
      return fetch('https://jsonplaceholder.typicode.com/posts', {
        method: 'POST',
        body: JSON.stringify(newPost),
        headers: {
          'Content-type': 'application/json; charset=UTF-8',
        },
      }).then((response) => response.json());
    }
  );

  return (
    <div>
      <div>
        <button onClick={() => userData.refetch()}>Get Users</button>
        <div>
          {userData.isFetching && (
            <div>Fetching user data...</div>
          )}
          {userData.isError && (
            <div>{`Error getting data!!!`}</div>
          )}
          {userData.data && userData.data.length > 0 && userData.data.map((user) => (
            <div key={user.id}>{user.name}</div>
          ))}
        </div>
      </div>
      <hr />
      <div>
        <button onClick={() => mutatePost.mutate({ title: 'First Post', body: 'First Post Body', userId: 1 })}>Add New Post</button>
        <div>
          {mutatePost.isLoading && (
            <div>Adding new post...</div>
          )}
          {mutatePost.isError && (
            <div>{`Error adding new post!!!`}</div>
          )}
          {mutatePost.data && (
            <div>{`Success added new post with title: '${mutatePost.data.title}'`}</div>
          )}
        </div>
      </div>
    </div>
  );
}

export default App;
import React from 'react';
This imports React just like in index.js.

import './App.css';
This imports the styles for the App component. This CSS will be applied to the elements in the App.js component.

import { useQuery, useMutation } from '@tanstack/react-query';
These are hooks from react-query. useQuery is used to fetch data, and useMutation is used to send data (e.g., making a POST request).

Inside the App component:
const userData = useQuery(...);

Purpose: This hook fetches data from an API (in this case, the list of users).
['users']: This is the unique key for the data we are fetching. It helps react-query manage and cache the data.
() => { ... }: This is the function that fetches the data. It makes a fetch request to https://jsonplaceholder.typicode.com/users and returns the response as JSON.
enabled: false: This tells react-query not to fetch the data automatically when the component loads. Instead, we will manually trigger the fetch using userData.refetch().
const mutatePost = useMutation(...);

Purpose: This hook is used to send data (like creating a new post).
(newPost) => { ... }: This is the function that sends a POST request to https://jsonplaceholder.typicode.com/posts to create a new post. The newPost parameter contains the post data we want to send.
method: 'POST': This tells the browser that we are sending data to the server (creating a new post).
body: JSON.stringify(newPost): This converts the newPost object into a JSON string so it can be sent as the request body.
headers: { 'Content-type': 'application/json; charset=UTF-8' }: This specifies that we are sending JSON data.
The JSX part (UI):
Button for Fetching Users:

There’s a button that, when clicked, will call userData.refetch(). This triggers the fetching of user data.
userData.isFetching: If data is being fetched, we show a loading message (Fetching user data...).
userData.isError: If there’s an error fetching data, we display an error message.
userData.data: If the data is successfully fetched, we map through the userData.data array and display each user's name in a <div>.
Button for Adding a New Post:

There’s a button that, when clicked, will send a new post to the API using mutatePost.mutate(...).
mutatePost.isLoading: If the post is being added, we show a loading message (Adding new post...).
mutatePost.isError: If there’s an error while adding the post, we show an error message.
mutatePost.data: If the post is successfully added, we show a success message with the title of the new post.
In Simple Terms:
React Query: useQuery is used to fetch data from the server (e.g., users), and useMutation is used to send data to the server (e.g., creating a new post).
Buttons: There are buttons that trigger fetching user data and adding a new post when clicked.
UI Feedback: While loading data or 
adding data, loading messages are shown. If there’s an error, 
an error message is displayed. If the operation is successful, success messages are shown.

onSuccess (default: undefined)
What it does: A function that runs after the query successfully fetches the data.

When to use it: If you want to perform something after the data is fetched, like showing a success message or updating a state.

Example:

js
Copy code
const { data } = useQuery('users', fetchUsers, {
  onSuccess: (data) => {
    console.log('Data fetched successfully:', data);
  },
});
9. onError (default: undefined)
What it does: A function that runs if the query fails (for example, if the network request fails).

When to use it: If you want to handle errors, like showing an error message to the user.

Example:

js
Copy code
const { data } = useQuery('users', fetchUsers, {
  onError: (error) => {
    console.error('Error fetching data:', error);
  },
});


const { data, isLoading, error } = useQuery('users', fetchUsers, {
  enabled: true, // Run the query automatically when the component mounts
  staleTime: 1000 * 60 * 5, // Keep data fresh for 5 minutes
  refetchOnWindowFocus: false, // Don't refetch when the window comes into focus
  retry: 2, // Retry fetching if it fails up to 2 times
  onSuccess: (data) => {
    console.log('Data fetched successfully:', data);
  },
  onError: (error) => {
    console.log('Error:', error);
  },
});


enabled: Don't run the query automatically; you control when it runs.
staleTime: How long the data is "fresh" before React Query thinks it needs to be refetched.
cacheTime: How long React Query keeps the data around in memory after you stop using it.
retry: How many times React Query should try again if it fails to fetch the data.
onSuccess / onError: Functions to run when the query succeeds or fails.
refetchInterval: Automatically refetch data after a certain time (e.g., every 10 seconds).


import React from 'react';
import { useMutation } from '@tanstack/react-query';

// Function to create a new post via a POST request
const createPost = async (newPost) => {
  const response = await fetch('https://jsonplaceholder.typicode.com/posts', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(newPost),
  });

  if (!response.ok) {
    throw new Error('Failed to create post');
  }

  return response.json(); // Returns the created post object
};

const App = () => {
  const mutation = useMutation(createPost, {
    onMutate: (variables) => {
      console.log('Mutation is starting with variables:', variables);
    },
    onSuccess: (data) => {
      console.log('Post created successfully:', data);
      alert(`New Post Created: ${data.title}`);
    },
    onError: (error) => {
      console.error('Error creating post:', error);
      alert('Failed to create post');
    },
    onSettled: (data, error) => {
      console.log('Mutation has finished (success or failure)');
    },
    retry: 2, // Retry up to 2 times if the mutation fails
    retryDelay: (attemptIndex) => attemptIndex * 1000, // Retry after 1s, 2s, etc.
  });

  const handleCreatePost = () => {
    const newPost = {
      title: 'New Post Title',
      body: 'This is the content of the new post.',
      userId: 1,
    };

    mutation.mutate(newPost); // Trigger the mutation with the new post data
  };

  return (
    <div>
      <button onClick={handleCreatePost} disabled={mutation.isLoading}>
        {mutation.isLoading ? 'Creating...' : 'Create New Post'}
      </button>

      {mutation.isError && (
        <div style={{ color: 'red' }}>
          <p>Error: {mutation.error.message}</p>
        </div>
      )}

      {mutation.isSuccess && (
        <div>
          <p>Post Created: {mutation.data.title}</p>
        </div>
      )}
    </div>
  );
};

export default App;



https://dummyapi.io/data/v1/user?page=${pageNum}&limit=10

// Function to calculate the binomial coefficient (n choose k)
function binomialCoeff(n, k) {
    // Base case: if k is 0 or n, the coefficient is 1
    if (k === 0 || k === n) {
        return 1;
    }
    // Otherwise, calculate using the formula (n-1 choose k-1) + (n-1 choose k)
    return binomialCoeff(n - 1, k - 1) + binomialCoeff(n - 1, k);
}

// Function to print Pascal's Triangle starting from row 1
function printPascalsTriangle(rows) {
    for (let n = 1; n <= rows; n++) {  // Start from 1 instead of 0
        let row = '';
        for (let k = 0; k < n; k++) {  // We start `k` from 0 and print up to n-1
            // Calculate binomial coefficient for the current row and position
            row += binomialCoeff(n - 1, k) + ' ';
        }
        // Print the row for Pascal's Triangle
        console.log(row.trim()); // trim removes any extra spaces at the end
    }
}

// Call the function to print 5 rows of Pascal's Triangle
printPascalsTriangle(5);