import axios from 'axios';

const url = 'https://api.example.com/data';

axios
  .get(url, {
    headers: {
      Authorization: `Bearer your_token_here`,
    },
  })
  .then((response) => {
    console.log('Response:', response.data);
  })
  .catch((error) => {
    console.error('Error:', error);
  });
******************* for adding Bearer token  while requesting for data

// axiosInstance.js
import axios from 'axios';

const axiosInstance = axios.create({
  baseURL: 'https://api.example.com', // Base API URL
});

// Add a request interceptor to automatically attach the token
axiosInstance.interceptors.request.use(
  (config) => {
    const token = 'your_bearer_token'; // Token from your app's state or storage
    if (token) {
      config.headers.Authorization = `Bearer ${token}`; // Attach the token
    }
    return config; // Proceed with the request
  },
  (error) => {
    return Promise.reject(error); // Handle request error
  }
);

export default axiosInstance;


// api.js
import axiosInstance from './axiosInstance';

// API function to fetch user data
export const fetchUser = async () => {
  const response = await axiosInstance.get('/user');
  return response.data; // Return only the data
};


// App.js
import React from 'react';
import { useQuery } from '@tanstack/react-query';
import { fetchUser } from './api';

const App = () => {
  // Use React Query to fetch user data
  const { data, isLoading, error } = useQuery(['user'], fetchUser);

  // Handle loading state
  if (isLoading) {
    return <div>Loading...</div>;
  }

  // Handle error state
  if (error) {
    return <div>Error: {error.message}</div>;
  }

  // Render user data
  return (
    <div>
      <h1>User Data</h1>
      <pre>{JSON.stringify(data, null, 2)}</pre>
    </div>
  );
};

export default App;


*************************** axios instance, request interceptor and react query altogether

// in response interceptor return the 

return response.data;

******************** response interceptor


import { useState } from 'react';
import reactLogo from './assets/react.svg';
import viteLogo from '/vite.svg';
import './App.css';
let render = 0;
function App() {
  const [count, setCount] = useState(0);
  const [email, setEmail] = useState('');

  return (
    <>
      <div>
        <a href="https://vite.dev" target="_blank">
          <img src={viteLogo} className="logo" alt="Vite logo" />
        </a>
        <a href="https://react.dev" target="_blank">
          <img src={reactLogo} className="logo react" alt="React logo" />
        </a>
      </div>
      <h1>Vite + React</h1>
      <div className="card">
        {/* <button onClick={() => setCount((count) => count + 1)}>
          count is {count}
        </button> */}
        <input
          placeholder="email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
        />

        <p>render {render++}</p>
        <p>
          Edit <code>src/App.tsx</code> and save to test HMR
        </p>
      </div>
      <p className="read-the-docs">
        Click on the Vite and React logos to learn more
      </p>
    </>
  );
}

export default App;


***************** showing rerendering

